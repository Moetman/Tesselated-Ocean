#version  430 compatibility

const float pi = 3.14159;


layout(triangles, equal_spacing, cw) in;
in vec3 tcPosition[];
out vec3 tePosition;
out vec3 tePatchDistance;
in vec2 TexCoord_ES_in[];
out vec2 TexCoord_GS_in;
in vec3 Normal_ES_in[];    

out vec3 Normal_GS_in;

out vec3 lightv_GS_in;

uniform mat4 osg_ProjectionMatrix;
uniform mat4 osg_ModelViewMatrix;
uniform float time;


const int numWaves = 30;


uniform sampler2D oceanHeightmap;
//uniform int numWaves;
uniform vec3 LightPosition;
uniform float waterHeight;

uniform float amplitudes[numWaves];
uniform float wavelengths[numWaves];
uniform float speeds[numWaves];
uniform vec3 directions[numWaves];
uniform float steepness[numWaves];




//uniform vec4 waveCharacteristics[numWaves];



#define textureSize 512.0
#define texelSize 1.0 / 512.0

vec4 texture2D_bilinear(  sampler2D tex, vec2 uv )
{
	vec2 f = fract( uv.xy * textureSize );
	vec4 t00 = texture2D( tex, uv );
	vec4 t10 = texture2D( tex, uv + vec2( texelSize, 0.0 ));
	vec4 tA = mix( t00, t10, f.x );
	vec4 t01 = texture2D( tex, uv + vec2( 0.0, texelSize ) );
	vec4 t11 = texture2D( tex, uv + vec2( texelSize, texelSize ) );
	vec4 tB = mix( t01, t11, f.x );
	return mix( tA, tB, f.y );
}

float randomizer(const float x)
{
    float z = mod(x, 5612.0);
    z = mod(z, 3.1415927 * 2.0);
    return(fract(cos(z) * 56812.5453));
}

const float A = 1.0;
const float B = 57.0;
const float C = 113.0;
const vec3 ABC = vec3(A, B, C);




float cnoise(const in vec3 xx)
{
    vec3 x = mod(xx + 32768.0, 65536.0);
    vec3 ix = floor(x);
    vec3 fx = fract(x);
    vec3 wx = fx*fx*(3.0-2.0*fx);
    float nn = dot(ix, ABC);

    float re = mix(mix(mix(randomizer(nn),
                           randomizer(nn + A),wx.x),
                       mix(randomizer(nn + B),
                           randomizer(nn + A + B),wx.x),wx.y),
                   mix(mix(randomizer(nn + C),
                           randomizer(nn + C + A),wx.x),
                       mix(randomizer(nn + C + B),
                           randomizer(nn + C + B + A),wx.x),wx.y),wx.z);

    return 1.0 - 2.0 * re;
}


vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)    
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}      
                                                                                                
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)                                                   
{                                                                                               
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;   
}

float surface3 ( vec3 coord ) {
        float frequency = 4.0;
        float n = 0.0;  

        n += 1.0    * abs( cnoise( coord * frequency ) );
        n += 0.5    * abs( cnoise( coord * frequency * 2.0 ) );
        n += 0.25   * abs( cnoise( coord * frequency * 4.0 ) );

        return n;
}

vec3 gerstnerwavedisp(vec3 pos, float time)
{
  
  float g = 9.8;
  float Pi2 = 6.28319;
  int octave = 0;

  vec3 x,x0,kN;
  vec3 disp = vec3(0.0,0.0,0.0);
  vec3 unscaledDisp;
  vec3 kNMag;


  float Km, w, wt, AmpM, Phase, Chop;
  float dispy = 0;


  x = pos;
  vec3 position = vec3(0.0,0.0,0.0);;
  vec3 surfaceSize = vec3(.5,.5,.50);
  Chop = 0.5;

for(int i=0; i  < numWaves; ++i)
{
	
  
	//Direction normalized
	vec3 tdirection = normalize(directions[i]);
	float P = speeds[i];

	AmpM = amplitudes[i];
	
	Km = Pi2 / 1.0;//wavelengths[i];
	float W = 2* pi / wavelengths[i];
	
	kNMag = W * tdirection;
	w =  sqrt(g * W);
	wt = w * time;
	
	x0 = surfaceSize * x;
	disp += AmpM * (kNMag / W) * sin(dot(kNMag,x0) -wt + P) * Chop;
	
	
	//sin( frequency * dist + phase );
	
	/*
	
	f = 1/T
	
	f =  71 occurences/15 secs = 4.7 hertz 
	
	*/
	
	
	
}

	
	unscaledDisp = vec3( pos.x, pos.y  , ( disp.y )/ surfaceSize.y);
	
	

return unscaledDisp;



}



vec3 GerstnerPosition(vec3 pos, float range,  float time)
{

int N = numWaves;
float S = 1.0;

vec3 position = vec3(0.0,0.0,0.0);
float spd = 1.1;

for(int i=0; i<numWaves; ++i)
{
	
	float A = amplitudes[i] ; 		       //Amplitude
	float frequency = 2*pi / wavelengths[i];       //Frequency
	float phase = speeds[i] * frequency;	       //Phase	
	float Qi = steepness[i]/(frequency * A * 4.0); // Steepness
	float theta = dot(directions[i].xy, pos.xy) ;
	
    
	 
		
		  //position += vec3(Qi * A * directions[i].x * C,  Qi * A * directions[i].y * C,  A * S  );
		  //position += vec3(Qi * A * directions[i].x * C, A * S , Qi * A * directions[i].z );
    
    
	
	
	position.x += amplitudes[i] * cos(theta * frequency + time * phase);
	position.y += amplitudes[i] * cos(theta * frequency + time * phase);
	position.z += amplitudes[i] * sin(theta * frequency + time * phase);
	
	


}

pos.z += position.z;

return pos;


 


}


vec3 generateNormalAndTangent(vec3 v1, vec3 v2, vec2 st1, vec2 st2)
	{
		vec3 normal = cross(v1 ,v2);
		
		float coef = 1/ (st1.s * st2.t - st2.s * st1.t);
		vec3 tangent;

		tangent.x = coef * ((v1.x * st2.t)  + (v2.x * -st1.t));
		tangent.y = coef * ((v1.y * st2.t)  + (v2.y * -st1.t));
		tangent.z = coef * ((v1.z * st2.t)  + (v2.z * -st1.t));
		
		vec3 binormal = cross(normal, tangent);
		return binormal;
	}
		




float wave(int i, float x, float y) {

    float frequency = 2*pi/ wavelengths[i];
    float phase = speeds[i] * frequency;
    float theta = dot(directions[i].xy, vec2(x, y));

    
    return amplitudes[i] * sin(theta * frequency  + (time * phase) );
}

float waveHeight(float x, float y) {
    float height = 1.0;
   
    for (int i = 0; i < numWaves; ++i)
        height += wave(i, x, y);
  
        
        
    return height;
}

float dWavedx(int i, float x, float y) {

    float frequency = 2*pi/wavelengths[i];
    float phase = speeds[i] * frequency;
    float theta = dot(directions[i].xy, vec2(x, y));
    float A = amplitudes[i] * directions[i].x * frequency;
    
    //return A * cos(theta * frequency + time * phase);
     return A * cos(theta * frequency  + (time * phase) );
}

float dWavedy(int i, float x, float y) {

    float frequency = 2*pi/wavelengths[i];
    float phase = speeds[i] * frequency;
    float theta = dot(directions[i].xy, vec2(x, y));

    float A = amplitudes[i] * directions[i].y * frequency;
    
    
    //return A * sin(theta * frequency + time * phase);
    return A * cos(theta * frequency  + (time * phase) );
}

vec3 waveNormal(float x, float y) {
    float dx = 0.0;
    float dy = 0.0;
    for (int i = 0; i < numWaves; ++i) {   //numWaves
        dx +=   dWavedx(i, x, y);
        dy +=   dWavedy(i, x, y);
    }
    vec3 n = vec3(-dx, -dy, 1.0);
    return normalize(n);
}

/*

struct WaveParameters
{
    float wavelength; //0 
    float steepness;  //1
    float speed;      //2	
    float kAmpOverLen;//3
    Vector2 wave_dir; //4
};

*/


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void wave_function( in float time, in vec3 pos,out vec3 P, out vec3 N, out vec3 B, out vec3 T)
            {
             float PI = 3.14159265358979323846264;
             P = pos;
             for (int i = 0; i < numWaves; i ++) {
		  float A = amplitudes[i] ; 		     // Amplitude
		  float omega = 2.0 * PI / wavelengths[i];   // Frequency //float frequency = 2*pi/ wavelengths[i];  
		  float phi = speeds[i]  * omega; 	     // Phase
		  float Qi = steepness[i]/(omega * A * 4.0); // Steepness

		  float term = omega * dot(directions[i].xy, pos.xy) + phi * time;
		  float C = sin(term);
		  float S = cos(term);
		  P += vec3(Qi * A * directions[i].x * C,  Qi * A * directions[i].y * C,  A * S  );
		  //P += vec3(Qi * A * directions[i].x * C, A * S , Qi * A * directions[i].z );
             }
             
             
             B = vec3(0.0);
             T = vec3(0.0);
             N = vec3(0.0);
             
             for (int i = 0; i < numWaves; i ++ ) {
		  float A = amplitudes[i] ; // Amplitude
		  float omega = 2.0 * PI / wavelengths[i]; // Frequency //float frequency = 2*pi/ wavelengths[i];  
		  float phi = speeds[i]  * omega; // Phase
		  float Qi = steepness[i]/(omega * A * 4.0); // Steepness

		  float WA = omega * A;
		  float term = omega * dot(vec2(directions[i].x, directions[i].y), vec2(P.x, P.y)) + phi * time;
		  float C = sin(term);
		  float S = cos(term);
		  B += vec3 (Qi * directions[i].x * directions[i].y * WA * S,  Qi * directions[i].x * directions[i].x * WA * S,  directions[i].x * WA * C);

		  T += vec3 (Qi * directions[i].x * directions[i].y * WA * S,  Qi * directions[i].y * directions[i].y * WA * S,  directions[i].y * WA * C);

		  N += vec3 (directions[i].x * WA * C, directions[i].y * WA * C,  Qi * WA * S);
             }
             
             
             B = normalize(vec3(1.0 - B.x, -B.y, B.z));
             T = normalize(vec3(-T.x, 1.0 - T.y, T.z));
             N = normalize(vec3(-N.x, -N.y, 1.0 - N.z));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void main(){
    vec3 p0 = gl_TessCoord.x * tcPosition[0];
    vec3 p1 = gl_TessCoord.y * tcPosition[1];
    vec3 p2 = gl_TessCoord.z * tcPosition[2];
    
    tePatchDistance = gl_TessCoord;
    //tePosition = normalize(p0 + p1 + p2);
	 tePosition = (p0 + p1 + p2);

     TexCoord_GS_in = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);
     Normal_GS_in = interpolate3D(Normal_ES_in[0], Normal_ES_in[1], Normal_ES_in[2]);  
     
     
     vec3 P, N, B, T;
     
     //wave_function( time, tePosition.xyz, P, N, B, T);
     
     //P = gerstnerwavedisp(tePosition.xyz, time);
     P = GerstnerPosition(tePosition.xyz, 1.0f,  time);
     
     //vec4 pos = (osg_ModelViewMatrix * vec4(P.xyz, 1.0));
     
	  //tePosition.z +=cnoise(tePosition.xyz );
	  
	  //vec4 pos = vec4(tePosition, 1);
	  //pos.z = 0.0 + waveHeight(pos.x, pos.y) ;
	  //pos = (pos.xyz / pos.w);
	
	
	
		  //vec2 index = TexCoord_GS_in.st * 3;
		  //vec2 index2 = TexCoord_GS_in.st * 3; 
	  
		  //index.x +=  time * 0.02;
		  //index2.y += time * 0.02;
	   
	  
	
		  //vec3 pos1 =  texture2D_bilinear( oceanHeightmap, index ).xyz;   //texture2D(oceanHeightmap, index.st ).xyz ;
		  //vec3 pos2 =  texture2D_bilinear( oceanHeightmap, index2 ).xyz;  //texture2D(oceanHeightmap, index2.st ).xyz ;
		  //vec3 normal = normalize(cross(pos1 ,pos2));
		  //Normal_GS_in = normal;
		  //float d0 = 0.2989*pos1.r + 0.5870*pos1.g + 0.1140*pos1.b;
		  //float d1 = 0.2989*pos2.r + 0.5870*pos2.g + 0.1140*pos2.b;
		  //position.z = (d0 + d1) * 0.1;	
	
	
	
	
	 vec3 lightv = vec3(dot(LightPosition, B), dot(LightPosition, T),dot(LightPosition, N));
         lightv_GS_in = (lightv);
	
	
	
	Normal_GS_in = N;//waveNormal(P.x, P.y) ;
	
	//gl_Position = osg_ProjectionMatrix * osg_ModelViewMatrix * vec4(position,1.0);
	
	
	gl_Position = osg_ProjectionMatrix * osg_ModelViewMatrix *  vec4(P,1.0);
	
	
	
	


}







